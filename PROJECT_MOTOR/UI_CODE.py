# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_TESTTING.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
from UI_TESTTING import Ui_MainWindow
from serial import Serial
from time import sleep,ctime 

class myclass(Ui_MainWindow):
    def __init__(self) -> None:
        super().setupUi(MainWindow)
        self.x_def = 0
        self.y_def = 0
        self.z_def = 0
        self.gnc()
        self.x_post = 0
        self.y_post = 0
        self.z_post = 0
        self.GetVal = 0
        self.ser = Serial('COM12',115200)

        self.ser.setDTR(1)
        self.ser.setRTS(0)
        self.tm1tick = QtCore.QTimer()
        self.tm1tick.timeout.connect(self.checkbottom)
        self.tm1tick.setInterval(100)
        self.tm1tick.start()


        

    def gnc(self):
        self.mannualMode.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.manpage))
        self.jogMode.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.jogpage))

        self.Initial_bottom.clicked.connect(self.INITIAL_SET)
        self.home_bottom.clicked.connect(self.HOME_SET)
        self.start_bottom.clicked.connect(self.START_SET)

        self.horizontalSlider_1.sliderReleased.connect(self.X_SET)
        self.horizontalSlider_2.sliderReleased.connect(self.Y_SET)
        self.horizontalSlider_3.sliderReleased.connect(self.Z_SET)

        self.jogxu.clicked.connect(self.Ux)
        self.jogxd.clicked.connect(self.Dx)

        self.jogyu.clicked.connect(self.Uy)
        self.jogyd.clicked.connect(self.Dy)

        self.jogzu.clicked.connect(self.Uz)
        self.jogzd.clicked.connect(self.Dz)

        self.selectbot.clicked.connect(self.Setting)
        self.Restsetbot.clicked.connect(self.Rest)
        self.lineEdit.returnPressed.connect(self.takeVal)

    def checkbottom(self):
        if(self.x_post==0):
            self.jogxd.setDisabled(1)
        else:
            self.jogxd.setEnabled(1)

        if(self.y_post==0):
            self.jogyd.setDisabled(1)
        else:
            self.jogyd.setEnabled(1)

        if(self.z_post==0):
            self.jogzd.setDisabled(1)
        else:
            self.jogzd.setEnabled(1)


        if(self.x_post>=300):
            self.jogxu.setDisabled(1)
            self.x_def=300
            self.X_core_j.setNum(300)

        else:
            self.jogxu.setEnabled(1)

        if(self.y_post>=200):
            self.y_def=200
            self.jogyu.setDisabled(1)
            self.Y_core_j.setNum(200)
        else:
            self.jogyu.setEnabled(1)

        if(self.z_post>=200):
            self.jogzu.setDisabled(1)
            self.z_def=200
            self.Z_core_j.setNum(200)
        else:
            self.jogzu.setEnabled(1)
        
        
        
    
    def Rest(self):
        self.GetVal = 0
        self.lineEdit.setText('0')
        self.jogxu.setEnabled(1)
        self.jogxd.setEnabled(1)
        self.jogyu.setEnabled(1)
        self.jogyd.setEnabled(1)
        self.jogzu.setEnabled(1)
        self.jogzd.setEnabled(1)
        self.selectbot.setEnabled(1)
        self.lineEdit.setEnabled(1)

    def takeVal(self):
        try:
            value = int(self.lineEdit.text())
            if value > 10:
                value = 10
            elif value < 0:
                value = 0
            self.lineEdit.setText(str(value))
            self.GetVal = value  

        except ValueError:
            self.GetVal = None

    def Setting(self):
        self.takeVal()
        # print(type(self.GetVal))
        
        if isinstance(self.GetVal, int):  
            self.selectbot.setDisabled(1)
            self.lineEdit.setDisabled(1)

    def Ux(self):
            self.x_def += int(self.GetVal)
            self.X_core_j.setNum(self.x_def)
            self.x_post = self.x_def
            self.ser.write(f'a{self.GetVal}'.encode())
            print(self.x_def)
            self.horizontalSlider_1.setValue(self.x_def)
            

    def Dx(self):
            self.x_def -= int(self.GetVal)
            self.X_core_j.setNum(self.x_def)
            self.x_post = self.x_def
            self.ser.write(f'b{self.GetVal}'.encode())
            print(self.x_def)
            self.horizontalSlider_1.setValue(self.x_def)

    def Uy(self):
            self.y_def += int(self.GetVal)
            self.Y_core_j.setNum(self.y_def)
            self.y_post = self.y_def
            self.ser.write(f'c{self.GetVal}'.encode())
            print(self.y_def)
            self.horizontalSlider_2.setValue(self.y_def)
            
    def Dy(self):
            self.y_def -= int(self.GetVal)
            self.Y_core_j.setNum(self.y_def)
            self.y_post = self.y_def
            self.ser.write(f'd{self.GetVal}'.encode())
            print(self.y_def)
            self.horizontalSlider_2.setValue(self.y_def)

    def Uz(self):
            self.z_def += int(self.GetVal)
            self.Z_core_j.setNum(self.z_def)
            self.z_post = self.z_def
            self.ser.write(f'e{self.GetVal}'.encode())
            print(self.z_def)
            self.horizontalSlider_3.setValue(self.z_def)

    def Dz(self):
            self.z_def -= int(self.GetVal)
            self.Z_core_j.setNum(self.z_def)
            self.z_post = self.z_def
            self.ser.write(f'f{self.GetVal}'.encode())
            print(self.z_def)
            self.horizontalSlider_3.setValue(self.z_def)


    def INITIAL_SET(self):
        self.horizontalSlider_1.setValue(0)
        self.horizontalSlider_2.setValue(0)
        self.horizontalSlider_3.setValue(0)

        self.x_post = self.horizontalSlider_1.value()
        self.y_post = self.horizontalSlider_2.value()
        self.z_post = self.horizontalSlider_3.value()

        self.x_post = 0
        self.y_post = 0
        self.z_post = 0

        self.x_def = 0
        self.y_def = 0
        self.z_def= 0

        self.X_core_j.setText(str(0))
        self.Y_core_j.setText(str(0))
        self.Z_core_j.setText(str(0))
        print(" ")
        # print(f'X:{x_post} ,Y:{y_post} ,Z:{z_post}')
        print(f'X,Y,Z: {self.x_post},{self.y_post},{self.z_post}')
        print("INITIAL Check")
        # self.xpoint()




    def HOME_SET(self):
        self.horizontalSlider_1.setValue(150)
        self.horizontalSlider_2.setValue(100)
        self.horizontalSlider_3.setValue(100)

        self.x_post = self.horizontalSlider_1.value()
        self.y_post = self.horizontalSlider_2.value()
        self.z_post = self.horizontalSlider_3.value()

        self.x_post = 150
        self.y_post = 100
        self.z_post = 100

        self.X_core_j.setText(str(150))
        self.Y_core_j.setText(str(150))
        self.Z_core_j.setText(str(150))


        print(" ")
        # print(f'X:{x_post} ,Y:{y_post} ,Z:{z_post}')
        print(f'X,Y,Z: {self.x_post},{self.y_post},{self.z_post}')
        print("HOME Check")
        # self.xpoint()
        

    def START_SET(self):
        self.x_post = self.horizontalSlider_1.value()
        self.y_post = self.horizontalSlider_2.value()
        self.z_post = self.horizontalSlider_3.value()
        # print(f'X:{x_post} ,Y:{y_post} ,Z:{z_post}')
        print(" ")
        # print(self.Xdecode)
        if self.x_post==0 and self.y_post==0 and self.z_post==0:
            self.ser.write('u'.encode())

        else:
            self.xpoint()

            self.ypoint()
            
            self.zpoint()

        print(f'X,Y,Z: {self.x_post},{self.y_post},{self.z_post}')
        print("START Check")


    def X_SET(self):
        self.x_vale = self.horizontalSlider_1.value()
        self.X_core_j.setText(str(self.x_vale))
        print(f'X : {self.x_vale}')
    
    def Y_SET(self):
        self.y_vale = self.horizontalSlider_2.value()
        self.Y_core_j.setText(str(self.y_vale))
        print(f'Y : {self.y_vale}')

    def Z_SET(self):
        self.z_vale = self.horizontalSlider_3.value()
        self.Z_core_j.setText(str(self.z_vale))
        print(f'Z : {self.z_vale}')

    def xpoint(self):
        # if(self.x_post==self.x_def):
        #     print(0)
        
        if (self.x_post>=self.x_def):
            self.x_def = self.x_post - self.x_def
            self.ser.write(f'a{self.x_def}'.encode())
            print(f'X : +{self.x_def}')
            self.x_def=self.x_post
            # self.Xdecode ='a'+str(self.x_def)
            # self.ser.write(self.Xdecode.encode())


        elif(self.x_post<=self.x_def):
            self.x_def = abs(self.x_post - self.x_def)  
            self.ser.write(f'b{self.x_def}'.encode())
            print(f'X : -{self.x_def}')
            self.x_def=self.x_post



    def ypoint(self):
        # if(self.y_post==self.y_def):
        #     print(0)

        if (self.y_post>=self.y_def):
            self.y_def = self.y_post - self.y_def
            self.ser.write(f'c{self.x_def}'.encode())
            print(f'Y : +{self.y_def}')
            self.y_def=self.y_post


        elif(self.y_post<=self.y_def):
            self.y_def = abs(self.y_post - self.y_def)
            self.ser.write(f'd{self.x_def}'.encode())
            print(f'Y : -{self.y_def}')
            self.y_def=self.y_post


    def zpoint(self):
        # if(self.z_post==self.z_def):
        #     print(0)

        if (self.z_post>=self.z_def):
            self.z_def = self.z_post - self.z_def
            self.ser.write(f'e{self.z_def}'.encode())
            print(f'Z : +{self.z_def}')
            self.z_def=self.z_post

        elif(self.z_post<=self.z_def):
            self.z_def = abs(self.z_post - self.z_def)
            self.ser.write(f'f{self.z_def}'.encode())  
            print(f'Z : -{self.z_def}')
            self.z_def=self.z_post

if __name__ == "__main__":
    myobj = myclass()
    MainWindow.show()
    sys.exit(app.exec_())
