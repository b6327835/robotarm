# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_TESTTING.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
from UI_TESTTING import Ui_MainWindow
from serial import Serial
from time import sleep,ctime 
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread

import cv2
import numpy as np
from ultralytics import YOLO

class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)
    def run(self): 
        model = YOLO('yolov8n.pt')

# ฟังก์ชันสำหรับการตรวจจับวัตถุโดยใช้ YOLOv8
        def detect_objects(frame, conf):
            results = model(frame, conf=conf)
            return results

# ตั้งค่ากล้อง C922
        fov = 78  # FOV ของกล้อง C922
        image_width = 661  # ความกว้างของภาพที่ได้จากกล้อง
        image_height = 500  # ความสูงของภาพที่ได้จากกล้อง

        # กำหนดค่าการปรับ confidence threshold
        conf_threshold = 0.5  # ปรับค่า conf ได้ที่นี่

        # เปิดกล้อง
        cap = cv2.VideoCapture(0)

        while cap.isOpened():
            ret, cv_img = cap.read()
            if not ret:
                break
            
            # ตรวจจับวัตถุในภาพโดยปรับค่า confidence threshold
            results = detect_objects(cv_img, conf=conf_threshold)
            
            for result in results:
                for bbox in result.boxes.xyxy.cpu().numpy():
                    x1, y1, x2, y2 = bbox
                    center_x = int((x1 + x2) / 2)
                    center_y = int((y1 + y2) / 2)
                    
                    # คำนวณ Y โดยให้จุดเริ่มต้น 0,0 อยู่ที่มุมซ้ายล่าง
                    inverted_y = image_height - center_y
                    
                    # วาดกรอบและแสดงพิกัด XY บนภาพ
                    cv2.rectangle(cv_img, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                    cv2.putText(cv_img, f"X: {center_x} Y: {inverted_y}", 
                                (int(x1), int(y1) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                    
                    # วาดจุดตรงกลางของวัตถุ
                    # cv2.circle(frame, (center_x, image_height - center_y), 5, (0, 0, 255), -1)
                    cv2.circle(cv_img, (center_x, center_y), 5, (0, 0, 255), -1)
            
            # แสดงภาพ
            # cv2.imshow('YOLOv8 XY Detection', cv_img)
            display_img = cv2.resize(cv_img, (image_width, image_height))
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            self.change_pixmap_signal.emit(display_img)

        cap.release()
        cv2.destroyAllWindows()




# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class myclass(Ui_MainWindow):
    def __init__(self) -> None:
        super().setupUi(MainWindow)
        self.gnc()

        self.x_def = 0
        self.y_def = 0
        self.z_def = 0

        self.x_post = 0
        self.y_post = 0
        self.z_post = 0
        self.GetVal = 0

        # self.ser = Serial('COM12',115200)
        # self.ser.setDTR(1)
        # self.ser.setRTS(0)

        self.tm1tick = QtCore.QTimer()
        self.tm1tick.timeout.connect(self.checkbottom)
        self.tm1tick.setInterval(100)
        self.tm1tick.start()        

    def gnc(self):
        self.mannualMode.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.manpage))
        self.jogMode.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.jogpage))
        self.VSMode.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Gopoint))

        self.Initial_bottom.clicked.connect(self.INITIAL_SET)
        self.home_bottom.clicked.connect(self.HOME_SET)
        self.start_bottom.clicked.connect(self.START_SET)

        self.horizontalSlider_1.sliderReleased.connect(self.X_SET)
        self.horizontalSlider_2.sliderReleased.connect(self.Y_SET)
        self.horizontalSlider_3.sliderReleased.connect(self.Z_SET)

        self.jogxu.clicked.connect(self.Ux)
        self.jogxd.clicked.connect(self.Dx)

        self.jogyu.clicked.connect(self.Uy)
        self.jogyd.clicked.connect(self.Dy)

        self.jogzu.clicked.connect(self.Uz)
        self.jogzd.clicked.connect(self.Dz)

        self.selectbot.clicked.connect(self.Setting)
        self.Restsetbot.clicked.connect(self.Rest)
        self.lineEdit.returnPressed.connect(self.takeVal)

        self.thread = VideoThread()
        self.thread.start()
        self.thread.change_pixmap_signal.connect(self.update_image)
        self.disply_width = self.Display.width()
        self.display_height = self.Display.height()

    def update_image(self, cv_img):
        qt_img = self.convert_cv_qt(cv_img,661,361)
        self.Display.setPixmap(qt_img)

    def convert_cv_qt(self, cv_img,Wx,Hx):
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        self.h, self.w, self.ch = rgb_image.shape
        bytes_per_line = self.ch * self.w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, self.w, self.h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(Wx, Hx,Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)


    def checkbottom(self):
        if(self.x_post==0):
            self.jogxd.setDisabled(1)
        else:
             self.jogxd.setEnabled(1)

        if(self.y_post==0):
            self.jogyd.setDisabled(1)
        else:
             self.jogyd.setEnabled(1)

        if(self.z_post==0):
            self.jogzd.setDisabled(1)
        else:
             self.jogzd.setEnabled(1)


        if(self.x_post>=300):
            self.jogxu.setDisabled(1)
            self.x_def=300
            self.X_core_j.setNum(self.x_def)

        else:
             self.jogxu.setEnabled(1)

        if(self.y_post>=200):
            self.jogyu.setDisabled(1)
            self.y_def=200
            self.Y_core_j.setNum(self.x_def)
        else:
             self.jogyu.setEnabled(1)

        if(self.z_post>=200):
            self.jogzu.setDisabled(1)
            self.z_def=200
            self.Z_core_j.setNum(self.x_def)
        else:
             self.jogzu.setEnabled(1)
        
        
        
    
    def Rest(self):
        self.GetVal = 0
        self.lineEdit.setText('0')
        self.jogxu.setEnabled(1)
        self.jogxd.setEnabled(1)
        self.jogyu.setEnabled(1)
        self.jogyd.setEnabled(1)
        self.jogzu.setEnabled(1)
        self.jogzd.setEnabled(1)
        self.selectbot.setEnabled(1)
        self.lineEdit.setEnabled(1)


    def takeVal(self):
        try:
            value = int(self.lineEdit.text())
            if value > 10:
                value = 10
            elif value < 0:
                value = 0
            self.lineEdit.setText(str(value))
            self.GetVal = value  

        except ValueError:
            self.GetVal = None

    def Setting(self):
        self.takeVal()
        # print(type(self.GetVal))
        
        if isinstance(self.GetVal, int):  
            self.selectbot.setDisabled(1)
            self.lineEdit.setDisabled(1)

        else: 
            self.lineEdit.setText('Try again.')
            self.jogxu.setDisabled(1)
            self.jogxu.setDisabled(1)
            self.jogxd.setDisabled(1)
            self.jogyu.setDisabled(1)
            self.jogyd.setDisabled(1)
            self.jogzu.setDisabled(1)
            self.jogzd.setDisabled(1)


    

    def Ux(self):
            self.x_def += int(self.GetVal)
            self.X_core_j.setNum(self.x_def)
            self.x_post = self.x_def
            print(self.x_def)
            self.horizontalSlider_1.setValue(self.x_def)
            

    def Dx(self):
            self.x_def -= int(self.GetVal)
            self.X_core_j.setNum(self.x_def)
            self.x_post = self.x_def
            print(self.x_def)
            self.horizontalSlider_1.setValue(self.x_def)

    def Uy(self):
            self.y_def += int(self.GetVal)
            self.Y_core_j.setNum(self.y_def)
            self.y_post = self.y_def
            print(self.y_def)
            self.horizontalSlider_2.setValue(self.y_def)
            
    def Dy(self):
            self.y_def -= int(self.GetVal)
            self.Y_core_j.setNum(self.y_def)
            self.y_post = self.y_def
            print(self.y_def)
            self.horizontalSlider_2.setValue(self.y_def)

    def Uz(self):
            self.z_def += int(self.GetVal)
            self.Z_core_j.setNum(self.z_def)
            self.z_post = self.z_def
            print(self.z_def)
            self.horizontalSlider_3.setValue(self.z_def)

    def Dz(self):
            self.z_def -= int(self.GetVal)
            self.Z_core_j.setNum(self.z_def)
            self.z_post = self.z_def
            print(self.z_def)
            self.horizontalSlider_3.setValue(self.z_def)





    def INITIAL_SET(self):
        self.horizontalSlider_1.setValue(0)
        self.horizontalSlider_2.setValue(0)
        self.horizontalSlider_3.setValue(0)

        self.x_post = self.horizontalSlider_1.value()
        self.y_post = self.horizontalSlider_2.value()
        self.z_post = self.horizontalSlider_3.value()

        self.x_post = 0
        self.y_post = 0
        self.z_post = 0

        self.x_def = 0
        self.y_def = 0
        self.z_def= 0

        self.X_core_j.setText(str(0))
        self.Y_core_j.setText(str(0))
        self.Z_core_j.setText(str(0))
        print(" ")
        # print(f'X:{x_post} ,Y:{y_post} ,Z:{z_post}')
        print(f'X,Y,Z: {self.x_post},{self.y_post},{self.z_post}')
        print("INITIAL Check")
        # self.xpoint()




    def HOME_SET(self):
        
        self.horizontalSlider_1.setValue(150)
        self.horizontalSlider_2.setValue(100)
        self.horizontalSlider_3.setValue(100)

        self.x_post = self.horizontalSlider_1.value()
        self.y_post = self.horizontalSlider_2.value()
        self.z_post = self.horizontalSlider_3.value()

        self.x_post = 150
        self.y_post = 100
        self.z_post = 100

        self.X_core_j.setText(str(150))
        self.Y_core_j.setText(str(150))
        self.Z_core_j.setText(str(150))
        

        print(" ")
        # print(f'X:{x_post} ,Y:{y_post} ,Z:{z_post}')
        print(f'X,Y,Z: {self.x_post},{self.y_post},{self.z_post}')
        print("HOME Check")
        # self.xpoint()
        

    def START_SET(self):
        self.x_post = self.horizontalSlider_1.value()
        self.y_post = self.horizontalSlider_2.value()
        self.z_post = self.horizontalSlider_3.value()
        # print(f'X:{x_post} ,Y:{y_post} ,Z:{z_post}')
        print(" ")
        if self.x_post==0&self.y_post==0&self.z_post==0:
            # self.ser.write(f'u'.encode())
            self.xp = "3x" + str(0)
            self.yp = "3y" + str(0)
            self.zp = "3z" + str(0)
            self.setINITIAL = self.xp+','+self.yp+','+self.zp
            sleep(0.2)
            # self.ser.write(f'{self.setINITIAL}'.encode())
            print(self.setINITIAL)
            print("Set Initial")
        else:
            self.xpoint()
            self.ypoint()
            self.zpoint()
            self.setpost = self.xp+','+self.yp+','+self.zp
            sleep(0.2)
            # self.ser.write(f'{self.setpost}'.encode())
            print(self.setpost)
            
            print("Set Positions")    

        # print(f'X,Y,Z: {self.x_post},{self.y_post},{self.z_post}')
        # print("START Check")


    def X_SET(self):
        self.x_vale = self.horizontalSlider_1.value()
        self.X_core_j.setText(str(self.x_vale))
        print(f'X : {self.x_vale}')
    
    def Y_SET(self):
        self.y_vale = self.horizontalSlider_2.value()
        self.Y_core_j.setText(str(self.y_vale))
        print(f'Y : {self.y_vale}')

    def Z_SET(self):
        self.z_vale = self.horizontalSlider_3.value()
        self.Z_core_j.setText(str(self.z_vale))
        print(f'Z : {self.z_vale}')

    def xpoint(self):
        # if(self.x_post==self.x_def):
        #     print(0)
        
        if (self.x_post>=self.x_def):
            self.x_def = self.x_post - self.x_def
            print(f'X : +{self.x_def}')
            self.x_def=self.x_post
            self.xp = "1" + str(self.x_def)

            

        elif(self.x_post<=self.x_def):
            self.x_def = abs(self.x_post - self.x_def)  
            print(f'X : -{self.x_def}')
            self.x_def=self.x_post
            self.xp = "2" + str(self.x_def)


    def ypoint(self):
        # if(self.y_post==self.y_def):
        #     print(0)

        if (self.y_post>=self.y_def):
            self.y_def = self.y_post - self.y_def
            print(f'Y : +{self.y_def}')
            self.y_def=self.y_post
            self.yp = "1" + str(self.y_def)


        elif(self.y_post<=self.y_def):
            self.y_def = abs(self.y_post - self.y_def)
            print(f'Y : -{self.y_def}')
            self.y_def=self.y_post
            self.yp = "2" + str(self.y_def)


    def zpoint(self):
        # if(self.z_post==self.z_def):
        #     print(0)

        if (self.z_post>=self.z_def):
            self.z_def = self.z_post - self.z_def
            print(f'Z : +{self.z_def}')
            self.z_def=self.z_post
            self.zp = "1" + str(self.z_def)

        elif(self.z_post<=self.x_def):
            self.z_def = abs(self.z_post - self.z_def)  
            print(f'Z : -{self.z_def}')
            self.z_def=self.z_post
            self.zp = "2" + str(self.z_def)  







if __name__ == "__main__":
    myobj = myclass()
    MainWindow.show()
    sys.exit(app.exec_())
